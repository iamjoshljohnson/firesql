<?php
/**
 *    __  _____   ___   __          __
 *   / / / /   | <  /  / /   ____ _/ /_  _____
 *  / / / / /| | / /  / /   / __ `/ __ `/ ___/
 * / /_/ / ___ |/ /  / /___/ /_/ / /_/ (__  )
 * `____/_/  |_/_/  /_____/`__,_/_.___/____/
 *
 * @package FireSql
 * @author UA1 Labs Developers https://ua1.us
 * @copyright Copyright (c) UA1 Labs
 */

namespace Fire\Sql;

use \PDO;
use \Fire\Bug;
use \Fire\Bug\Panel\FireSqlPanel;
use \Fire\Bug\SqlStatement;

/**
 * This class is responsible for connecting and interacting with the database
 * object. It contains functionality to execute and query the database itself.
 * This class will also track all SQL queries and store them for the FireBug
 * Panel.
 */
class Connector
{

    /**
     * The PDO Object
     * @var \PDO
     */
    private $_pdo;

    /**
     * The FireBug instance
     * @var \Fire\Bug;
     */
    private $_firebug;

    /**
     * The constructor
     * @param \PDO $pdo
     */
    public function __construct(PDO $pdo)
    {
        $this->_pdo = $pdo;
        $this->_firebug = Bug::get();
    }

    /**
     * Executes a SQL statement. This method is meant for executing
     * SQL statements that manipulate data within the database.
     * @param string $sql
     * @return void
     */
    public function exec($sql) {
        // get start time of sql execution
        $start = $this->_firebug->timer();
        // execute sql
        $this->_pdo->exec($sql);
        // record sql statement
        if ($this->_firebug->isEnabled()) {
            $trace = debug_backtrace();
            $this->_recordSqlStatement($start, $sql, $trace);
        }
    }

    /**
     * Executes a SQL query. This meathod is meant for executing
     * SQL queries that will return records.
     * @param string $sql
     * @return array
     */
    public function query($sql)
    {
        // get start time of sql execution
        $start = $this->_firebug->timer();
        // execute sql
        $records = $this->_pdo->query($sql);
        // record sql statement
        if ($this->_firebug->isEnabled()) {
            $trace = debug_backtrace();
            $this->_recordSqlStatement($start, $sql, $trace);
        }

        return $records;
    }

    /**
     * Places quotes around input strings for SQL Queries.
     * @param string $statement
     * @return string
     */
    public function quote($statement)
    {
        return $this->_pdo->quote($statement);
    }

    /**
     * Records SQL statements to the FireBug Panel created to
     * track SQL queries.
     * @param float $start A timestamp created by FireBug::timer()
     * @param string $sql The SQL Statement to Record
     * @param array $trace The trace generated by debug_backtrace()
     * @return void
     */
    private function _recordSqlStatement($start, $sql, $trace)
    {
        $sqlStatement = new SqlStatement();
        $sqlStatement->setStatement($sql);
        $sqlStatement->setTime($this->_firebug->timer($start));
        $sqlStatement->setTrace($trace);
        $this->_firebug
            ->getPanel(FireSqlPanel::ID)
            ->addSqlStatement($sqlStatement);
    }

}
